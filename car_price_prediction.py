# -*- coding: utf-8 -*-
"""CAR_PRICE_PREDICTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x32XREWxUwrRiZ4yTQ7l1sBGBFxxhZEA
"""

import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler, PolynomialFeatures
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.impute import SimpleImputer

# 1Ô∏è‚É£ Load dataset
data = pd.read_csv('Car details.csv')

# 2Ô∏è‚É£ Create 'brand' column from car name
data['brand'] = data['name'].apply(lambda x: x.split()[0])

# 3Ô∏è‚É£ Convert numeric columns safely
def extract_numeric(val):
    try:
        if pd.isna(val) or val == '':
            return np.nan
        num_str = ''.join(c for c in str(val) if c.isdigit() or c == '.')
        if num_str == '':
            return np.nan
        return float(num_str)
    except:
        return np.nan

data['mileage'] = data['mileage'].apply(extract_numeric)
data['engine'] = data['engine'].apply(extract_numeric)
data['max_power'] = data['max_power'].apply(extract_numeric)

# Fill missing seats with mode
data['seats'] = data['seats'].fillna(data['seats'].mode()[0])

# 4Ô∏è‚É£ Features and target
X = data[['year', 'km_driven', 'fuel', 'seller_type', 'transmission',
          'owner', 'mileage', 'engine', 'max_power', 'seats', 'brand']]
y = data['selling_price']

# 5Ô∏è‚É£ Separate numeric & categorical columns
numeric_features = ['year', 'km_driven', 'mileage', 'engine', 'max_power', 'seats']
categorical_features = ['fuel', 'seller_type', 'transmission', 'owner', 'brand']

# 6Ô∏è‚É£ Define preprocessing pipelines with imputer
numeric_transformer = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),  # Fill NaNs with median
    ('poly', PolynomialFeatures(degree=2, include_bias=False)),
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline([
    ('imputer', SimpleImputer(strategy='most_frequent')),  # Fill NaNs with mode
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer([
    ('num', numeric_transformer, numeric_features),
    ('cat', categorical_transformer, categorical_features)
])

# 7Ô∏è‚É£ Full pipeline
pipe = Pipeline([
    ('preprocessor', preprocessor),
    ('model', LinearRegression())
])

# 8Ô∏è‚É£ Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 9Ô∏è‚É£ Fit model
pipe.fit(X_train, y_train)

# üîü Save pipeline
with open('pipe.pkl', 'wb') as f:
    pickle.dump(pipe, f)

print("‚úÖ Model retrained and saved as pipe.pkl")

